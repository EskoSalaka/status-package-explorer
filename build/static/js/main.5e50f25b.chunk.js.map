{"version":3,"sources":["components/AppHeader.js","hooks/usePackages.js","components/PackageInfoView/Dependencies.js","components/PackageInfoView/ReverseDependencies.js","components/PackageInfoView/PackageInfoView.js","components/PackageInfoView/index.js","helpers/parser.js","components/PackageListView.js","App.js","index.js"],"names":["styles","header","backgroundColor","display","alignItems","justifyContent","color","div","width","a","AppHeader","style","href","usePackages","useState","storageItem","window","localStorage","getItem","JSON","parse","error","console","log","packages","setPackages","value","setItem","stringify","innerDisplayHeader","marginRight","fontWeight","link","textDecoration","Dependencies","depends","packageNames","map","dependencyList","i","length","dependency","includes","key","to","optionalDependency","j","descriptionFieldDisplay","ReverseDependecies","reverseDepends","reverseDependency","card","boxShadow","transition","maxWidth","padding","marginTop","cardContainer","justifyItems","gridTemplateColumns","gridTemplateAreas","PackageInfoView","match","packageName","url","replace","trim","pckg","find","p","Package","type","Description","split","item","Depends","ReverseDepends","parseParagrah","paragraph","paragraphContents","parseField","fieldName","fieldLines","fieldContents","test","parseDepends","paragraphs","forEach","push","flat","sort","b","parseReverseDepends","other","validateControlFile","rawText","Error","filter","Boolean","packageLink","fontSize","fileUploadContainer","fileUploadContents","paddingRight","errorMessage","borderRadius","listBox","flexDirection","flexWrap","columnCount","columnFill","listItem","textAlign","minHeight","minWidth","PackageListView","fileInput","useRef","setErrorMessage","id","ref","onChange","event","File","FileReader","FileList","Blob","preventDefault","reader","onload","parsedResult","statusFileParser","target","result","readAsText","current","files","body","margin","App","exact","path","component","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e50f25b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styles = {\r\n  header: {\r\n    backgroundColor: \"#432b4e\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    color: \"white\"\r\n  },\r\n  div: {\r\n    width: \"800px\"\r\n  },\r\n  a: { color: \"inherit\" }\r\n};\r\n\r\nconst AppHeader = () => {\r\n  return (\r\n    <header style={styles.header}>\r\n      <div style={styles.div}>\r\n        <h1>A simple software package status file explorer</h1>\r\n        <p>\r\n          To explore the contents of the status file containing the information on packages that the\r\n          system knows about, just locate the file and click on the packages. On Debian and Ubuntu\r\n          systems, the status file is located in <i>/var/lib/dpkg/status/</i>.\r\n        </p>\r\n        <p>\r\n          Generally, the status file should be of the \"binary package control file\" - format\r\n          described in:{\" \"}\r\n          <a style={styles.a} href=\"https://www.debian.org/doc/debian-policy/ch-controlfields.html\">\r\n            https://www.debian.org/doc/debian-policy/ch-controlfields.html\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import { useState } from \"react\";\r\n\r\n// Simple hook for using localstorage with the variable \"packages\"\r\nconst usePackages = () => {\r\n  const [packages, setPackages] = useState(() => {\r\n    try {\r\n      const storageItem = window.localStorage.getItem(\"packages\");\r\n      return storageItem ? JSON.parse(storageItem) : [];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  const setValue = value => {\r\n    try {\r\n      setPackages(value);\r\n\r\n      window.localStorage.setItem(\"packages\", JSON.stringify(value));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [packages, setValue];\r\n};\r\n\r\nexport default usePackages;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  innerDisplayHeader: {\r\n    marginRight: 20,\r\n    fontWeight: \"bold\"\r\n  },\r\n  link: {\r\n    textDecoration: \"none\"\r\n  }\r\n};\r\n\r\nconst Dependencies = ({ depends, packageNames }) => {\r\n  return (\r\n    <>\r\n      <p style={styles.innerDisplayHeader}>Dependencies</p>\r\n      <p>\r\n        {depends.map((dependencyList, i) => {\r\n          if (dependencyList.length === 1) {\r\n            let dependency = dependencyList[0];\r\n\r\n            return packageNames.includes(dependency) ? (\r\n              <Link key={dependency} style={styles.link} to={dependency}>\r\n                {depends.length === i + 1 ? dependency : dependency + \", \"}\r\n              </Link>\r\n            ) : (\r\n              <span>{depends.length === i + 1 ? dependency : dependency + \", \"}</span>\r\n            );\r\n          } else {\r\n            return dependencyList.map((optionalDependency, j) => {\r\n              return packageNames.includes(optionalDependency) ? (\r\n                <Link key={optionalDependency} style={styles.link} to={optionalDependency}>\r\n                  {dependencyList.length !== j + 1\r\n                    ? optionalDependency + \" | \"\r\n                    : depends.length === i + 1\r\n                    ? optionalDependency\r\n                    : optionalDependency + \", \"}\r\n                </Link>\r\n              ) : (\r\n                <span>\r\n                  {dependencyList.length !== j + 1\r\n                    ? optionalDependency + \" | \"\r\n                    : depends.length === i + 1\r\n                    ? optionalDependency\r\n                    : optionalDependency + \", \"}\r\n                </span>\r\n              );\r\n            });\r\n          }\r\n        })}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dependencies;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  descriptionFieldDisplay: {},\r\n  innerDisplayHeader: {\r\n    marginRight: 20,\r\n    fontWeight: \"bold\"\r\n  },\r\n  link: {\r\n    textDecoration: \"none\"\r\n  }\r\n};\r\n\r\nconst ReverseDependecies = ({ reverseDepends }) => {\r\n  return (\r\n    <>\r\n      <p style={styles.innerDisplayHeader}>\r\n        Reverse <br />\r\n        Dependencies\r\n      </p>\r\n      <p>\r\n        {reverseDepends.map((reverseDependency, i) => {\r\n          return (\r\n            <Link key={reverseDependency} style={styles.link} to={reverseDependency}>\r\n              {reverseDepends.length === i + 1 ? reverseDependency : reverseDependency + \", \"}\r\n            </Link>\r\n          );\r\n        })}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReverseDependecies;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport usePackages from \"../../hooks/usePackages\";\r\nimport Dependencies from \"./Dependencies\";\r\nimport ReverseDependecies from \"./ReverseDependencies\";\r\n\r\nconst styles = {\r\n  card: {\r\n    boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\r\n    transition: \"0.3s\",\r\n    maxWidth: 600,\r\n    padding: 20,\r\n    marginTop: 20\r\n  },\r\n  cardContainer: {\r\n    display: \"grid\",\r\n    justifyItems: \"start\",\r\n    gridTemplateColumns: \"auto minmax(0, 1fr)\",\r\n    gridTemplateAreas: \"Header Content\"\r\n  },\r\n  innerDisplayHeader: {\r\n    marginRight: 20,\r\n    fontWeight: \"bold\"\r\n  }\r\n};\r\n\r\nconst PackageInfoView = ({ match }) => {\r\n  const [packages] = usePackages();\r\n  const packageName = match.url.replace(\"/\", \"\").trim();\r\n  const pckg = packages.find(p => p.Package === packageName);\r\n\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">\r\n        <button type=\"button\">&lArr; Home</button>\r\n      </Link>\r\n      {pckg ? (\r\n        <div style={styles.card}>\r\n          <h1>{pckg.Package}</h1>\r\n          <div style={styles.cardContainer}>\r\n            <p style={styles.innerDisplayHeader}>Description</p>\r\n            <p>\r\n              {pckg.Description.split(\"\\n\").map((item, key) => {\r\n                return (\r\n                  <span key={key}>\r\n                    {item}\r\n                    <br />\r\n                  </span>\r\n                );\r\n              })}\r\n            </p>\r\n            <Dependencies\r\n              depends={pckg.Depends}\r\n              packageNames={packages.map(pckg => {\r\n                return pckg.Package;\r\n              })}\r\n            />\r\n            <ReverseDependecies reverseDepends={pckg.ReverseDepends} />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <b>{` No info on the package \"${packageName}\" can't be found on the given control file`}</b>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PackageInfoView;\r\n","import PackageInfoView from \"./PackageInfoView\";\r\n\r\nexport default PackageInfoView;\r\n","const parseStatusFile = rawText => {\r\n  /* \r\n  Parses the raw text of the status file into an array of paragraph objects of the following format:\r\n  \r\n  paragraph: {\r\n    Package: String\r\n    Description: String\r\n    Depends: Array(Array(String))\r\n    ReverseDepends: Array(String)\r\n  }\r\n  \r\n  The dependencies can include multiple optional ones, so they are implemented as arrays of arrays which \r\n  include all the options. In case of no options, the inner array contains only a single element.\r\n  */\r\n\r\n  // First, a quick and dirty check if the format of the file is correct. Probably works well enough\r\n  validateControlFile(rawText);\r\n\r\n  // Next, we parse the Package, Description and Depends fields as strings from each paragraph\r\n  let paragraphs = rawText\r\n    .split(/\\n\\s*\\t*\\n/)\r\n    .filter(Boolean)\r\n    .map(paragraph => {\r\n      return parseParagrah(paragraph);\r\n    });\r\n\r\n  // Next, knowing all the package names in the file, we can parse the dependencies\r\n  parseDepends(paragraphs);\r\n\r\n  // Lastly, knowing all the dependecies of each package, we can parse the reverse dependencies\r\n  parseReverseDepends(paragraphs);\r\n\r\n  // Sorted by package name\r\n  return paragraphs.sort((a, b) => {\r\n    if (a.Package < b.Package) return -1;\r\n    else return 1;\r\n  });\r\n};\r\n\r\nconst parseParagrah = paragraph => {\r\n  let paragraphContents = {};\r\n\r\n  paragraphContents.Package = parseField(paragraph, \"Package\");\r\n  paragraphContents.Description = parseField(paragraph, \"Description\");\r\n  paragraphContents.Depends = parseField(paragraph, \"Depends\");\r\n\r\n  return paragraphContents;\r\n};\r\n\r\nconst parseField = (paragraph, fieldName) => {\r\n  if (paragraph.includes(fieldName)) {\r\n    let fieldLines = paragraph\r\n      .split(`${fieldName}:`)[1]\r\n      .trim()\r\n      .split(\"\\n\");\r\n\r\n    let fieldContents = fieldLines[0];\r\n\r\n    for (var i = 1; i < fieldLines.length; i++) {\r\n      if (/^\\s/.test(fieldLines[i]) && i > 0) {\r\n        fieldContents = fieldContents + \"\\n\" + fieldLines[i];\r\n      } else break;\r\n    }\r\n\r\n    return fieldContents.trim();\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nconst parseDepends = paragraphs => {\r\n  paragraphs.forEach(paragraph => {\r\n    if (paragraph.Depends === \"\") {\r\n      paragraph.Depends = [];\r\n    } else {\r\n      // Ignore versions\r\n      let depends = paragraph.Depends.replace(/ *\\([^)]*\\) */g, \"\")\r\n        .split(\",\")\r\n        .map(dependency => {\r\n          return dependency.trim();\r\n        });\r\n\r\n      paragraph.Depends = [];\r\n\r\n      depends.forEach(dependency => {\r\n        if (dependency.includes(\"|\")) {\r\n          paragraph.Depends.push(\r\n            dependency.split(\"|\").map(optionalDependency => {\r\n              return optionalDependency.trim();\r\n            })\r\n          );\r\n        } else {\r\n          // Removes duplicate single dependencies (these come from ignoring versions)\r\n          if (!paragraph.Depends.flat().includes(dependency)) paragraph.Depends.push([dependency]);\r\n        }\r\n      });\r\n\r\n      paragraph.Depends.sort((a, b) => {\r\n        if (a < b) return -1;\r\n        else return 1;\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nconst parseReverseDepends = paragraphs => {\r\n  paragraphs.forEach(paragraph => {\r\n    paragraph.ReverseDepends = [];\r\n\r\n    paragraphs.forEach(other => {\r\n      if (other.Depends.flat().includes(paragraph.Package))\r\n        paragraph.ReverseDepends.push(other.Package);\r\n    });\r\n\r\n    paragraph.ReverseDepends.sort((a, b) => {\r\n      if (a < b) return -1;\r\n      else return 1;\r\n    });\r\n  });\r\n};\r\n\r\nconst validateControlFile = rawText => {\r\n  if (\r\n    !rawText.includes(\"Package: \") ||\r\n    !rawText.includes(\"Description: \") ||\r\n    !rawText.includes(\"Architecture: \")\r\n  ) {\r\n    throw new Error(\"Invalid control file\");\r\n  }\r\n};\r\nexport default { parseStatusFile };\r\n","import React, { useRef, useState } from \"react\";\r\nimport statusFileParser from \"../helpers/parser\";\r\nimport { Link } from \"react-router-dom\";\r\nimport usePackages from \"../hooks/usePackages\";\r\n\r\nconst styles = {\r\n  packageLink: { fontWeight: \"bold\", textDecoration: \"none\", fontSize: 18 },\r\n  fileUploadContainer: { display: \"flex\", alignItems: \"center\" },\r\n  fileUploadContents: { paddingRight: 10 },\r\n  errorMessage: { color: \"#D8000C\", backgroundColor: \"#FFBABA\", borderRadius: 15, padding: 10 },\r\n  listBox: {\r\n    flexDirection: \"column\",\r\n    flexWrap: \"wrap\",\r\n\r\n    columnCount: 3,\r\n    columnFill: \"balance\"\r\n  },\r\n  listItem: { justifyContent: \"center\", flexDirection: \"column\", textAlign: \"start\" },\r\n  card: {\r\n    minHeight: 100,\r\n    minWidth: 300,\r\n    display: \"inline-block\",\r\n    boxShadow: \"0 4px 8px 0 rgba(0,0,0,0.2)\",\r\n    transition: \"0.3s\",\r\n    padding: 20\r\n  }\r\n};\r\n\r\nconst PackageListView = () => {\r\n  const fileInput = useRef();\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [packages, setPackages] = usePackages();\r\n\r\n  const handleFileUpload = event => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      event.preventDefault();\r\n\r\n      var reader = new FileReader();\r\n      reader.onload = function(event) {\r\n        try {\r\n          let parsedResult = statusFileParser.parseStatusFile(event.target.result);\r\n          console.log(\"====================================\");\r\n          console.log(parsedResult);\r\n          console.log(\"====================================\");\r\n          setPackages(parsedResult);\r\n          setErrorMessage(null);\r\n        } catch (error) {\r\n          setErrorMessage(\r\n            \"Failed reading the given file. Make sure that the given file is a correct control file.\"\r\n          );\r\n        }\r\n      };\r\n\r\n      reader.readAsText(fileInput.current.files[0]);\r\n    } else {\r\n      setErrorMessage(\"Looks like your browser doesn't support the HTML5 file API\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={styles.fileUploadContainer}>\r\n        <h3 style={styles.fileUploadContents}>Upload the control file </h3>\r\n        <input\r\n          style={styles.fileUploadContents}\r\n          type=\"file\"\r\n          id=\"fileInput\"\r\n          ref={fileInput}\r\n          onChange={handleFileUpload}\r\n        ></input>\r\n        {errorMessage && <p style={styles.errorMessage}>{errorMessage}</p>}\r\n      </div>\r\n      <div style={styles.card}>\r\n        <h1>Packages</h1>\r\n        <div>\r\n          <ul style={styles.listBox}>\r\n            {packages.map(pckg => {\r\n              return (\r\n                <li style={styles.listItem} key={pckg.Package}>\r\n                  <Link style={styles.packageLink} to={pckg.Package}>\r\n                    {pckg.Package}\r\n                  </Link>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PackageListView;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport AppHeader from \"./components/AppHeader\";\nimport PackageInfoView from \"./components/PackageInfoView\";\nimport PackageListView from \"./components/PackageListView\";\n\nconst styles = {\n  body: { margin: 20 }\n};\n\nconst App = () => {\n  return (\n    <div>\n      <AppHeader />\n      <div style={styles.body}>\n        <Router>\n          <Route exact path=\"/\" component={PackageListView} />\n          <Route exact path=\"/:packageName\" component={PackageInfoView} />\n        </Router>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}